---
description: React Hook Form: Guidelines and best practices for form handling with Next.js, ShadcnUI, and Zod
globs: **/*.tsx, **/*.ts
alwaysApply: true
---

# React Hook Form Guidelines

## Overview
React Hook Form is a performant, flexible, and extensible form library with easy-to-use validation. This guide covers best practices for using React Hook Form with Next.js, ShadcnUI components, and Zod validation.

## Project Structure

### Directory Organization
```typescript
src/
  components/
    forms/           # Reusable form components
      schemas/       # Zod schemas for forms
      hooks/        # Custom form hooks
    ui/             # ShadcnUI components
  lib/
    validations.ts  # Shared validation schemas
```

## Core Concepts

### Basic Form Setup
```typescript
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';

const formSchema = z.object({
  username: z.string().min(2).max(50),
  email: z.string().email(),
});

const FormComponent = () => {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      email: '',
    },
  });

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    // Handle form submission
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="username"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```

## Best Practices

### 1. Form Schema Definition
- Define Zod schemas outside components for reusability
- Use descriptive names for schema fields
- Include meaningful validation messages

```typescript
const userFormSchema = z.object({
  username: z.string()
    .min(2, {
      message: "Username must be at least 2 characters.",
    })
    .max(50, {
      message: "Username cannot exceed 50 characters.",
    }),
  email: z.string()
    .email({
      message: "Please enter a valid email address.",
    }),
});
```

### 2. Form State Management
- Use `defaultValues` for initial form state
- Implement controlled components with `FormField`
- Utilize form context for nested components

```typescript
const form = useForm<z.infer<typeof formSchema>>({
  resolver: zodResolver(formSchema),
  defaultValues: {
    username: '',
    email: '',
  },
  mode: 'onBlur', // Validate on blur
});
```

### 3. Error Handling
- Display validation errors using `FormMessage`
- Implement server-side error handling
- Use try-catch blocks for form submission

```typescript
const onSubmit = async (data: z.infer<typeof formSchema>) => {
  try {
    await submitForm(data);
    form.reset();
  } catch (error) {
    form.setError('root', {
      type: 'server',
      message: 'Something went wrong.',
    });
  }
};
```

### 4. Field Arrays
- Use `useFieldArray` for dynamic form fields
- Implement proper key management
- Handle array validation with Zod

```typescript
const dynamicFormSchema = z.object({
  items: z.array(
    z.object({
      name: z.string(),
      quantity: z.number().min(1),
    })
  ).min(1, "Add at least one item"),
});

const { fields, append, remove } = useFieldArray({
  control: form.control,
  name: "items",
});
```

## Integration with ShadcnUI

### 1. Form Components
- Use ShadcnUI form components for consistent styling
- Implement custom form controls when needed
- Maintain accessibility standards

```typescript
<FormField
  control={form.control}
  name="category"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Category</FormLabel>
      <Select
        onValueChange={field.onChange}
        defaultValue={field.value}
      >
        <SelectTrigger>
          <SelectValue placeholder="Select a category" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="option1">Option 1</SelectItem>
          <SelectItem value="option2">Option 2</SelectItem>
        </SelectContent>
      </Select>
      <FormMessage />
    </FormItem>
  )}
/>
```

### 2. Custom Form Controls
- Create reusable form controls
- Maintain consistent styling
- Implement proper accessibility attributes

```typescript
const CustomFormField = ({
  control,
  name,
  label,
}: {
  control: Control<any>;
  name: string;
  label: string;
}) => (
  <FormField
    control={control}
    name={name}
    render={({ field }) => (
      <FormItem>
        <FormLabel>{label}</FormLabel>
        <FormControl>
          <Input {...field} />
        </FormControl>
        <FormMessage />
      </FormItem>
    )}
  />
);
```

## Advanced Features

### 1. Form Validation Modes
```typescript
const form = useForm({
  mode: 'onBlur',        // Validate on blur
  reValidateMode: 'onChange', // Re-validate on change
  criteriaMode: 'all',   // Show all validation errors
});
```

### 2. Conditional Fields
```typescript
const ConditionalForm = () => {
  const { watch } = form;
  const showExtra = watch('enableExtra');

  return (
    <Form {...form}>
      <FormField
        name="enableExtra"
        render={({ field }) => (
          <FormItem>
            <FormControl>
              <Switch
                checked={field.value}
                onCheckedChange={field.onChange}
              />
            </FormControl>
          </FormItem>
        )}
      />
      {showExtra && (
        <FormField
          name="extraField"
          render={({ field }) => (
            <FormItem>
              <FormControl>
                <Input {...field} />
              </FormControl>
            </FormItem>
          )}
        />
      )}
    </Form>
  );
};
```

### 3. Form Submission
- Implement loading states
- Handle submission errors gracefully
- Provide user feedback

```typescript
const FormWithSubmission = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const onSubmit = async (data: FormData) => {
    setIsSubmitting(true);
    try {
      await submitForm(data);
      toast.success('Form submitted successfully');
    } catch (error) {
      toast.error('Failed to submit form');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? 'Submitting...' : 'Submit'}
      </Button>
    </Form>
  );
};
```

## Performance Optimization

### 1. Form Rendering
- Use `shouldUnregister` for dynamic fields
- Implement proper memoization
- Avoid unnecessary re-renders

```typescript
const MemoizedFormField = React.memo(CustomFormField);
```

### 2. Form Reset and Clear
- Implement proper form reset logic
- Clear form state when needed
- Handle side effects

```typescript
const resetForm = () => {
  form.reset();
  // Clear any custom state
  setCustomState(initialState);
};
```

## Testing

### 1. Form Testing
```typescript
import { render, screen, fireEvent } from '@testing-library/react';

describe('FormComponent', () => {
  it('should validate form fields', async () => {
    render(<FormComponent />);
    
    fireEvent.click(screen.getByRole('button', { name: /submit/i }));
    
    expect(await screen.findByText(/required/i)).toBeInTheDocument();
  });
});
```

## Common Patterns and Examples

### 1. File Upload Form
```typescript
const FileUploadForm = () => {
  const form = useForm<{ file: FileList }>();

  return (
    <Form {...form}>
      <FormField
        name="file"
        render={({ field: { onChange, value, ...field } }) => (
          <FormItem>
            <FormLabel>Upload File</FormLabel>
            <FormControl>
              <Input
                type="file"
                onChange={(e) => onChange(e.target.files)}
                {...field}
              />
            </FormControl>
            <FormMessage />
          </FormItem>
        )}
      />
    </Form>
  );
};
```

### 2. Multi-step Form
```typescript
const MultiStepForm = () => {
  const [step, setStep] = useState(0);
  const form = useForm<FormData>();

  const nextStep = async () => {
    const isValid = await form.trigger(stepFields[step]);
    if (isValid) setStep((s) => s + 1);
  };

  return (
    <Form {...form}>
      {step === 0 && <Step1Fields />}
      {step === 1 && <Step2Fields />}
      <Button onClick={nextStep}>
        {step === lastStep ? 'Submit' : 'Next'}
      </Button>
    </Form>
  );
};
``` 