<context>

# Overview

Pottable is a comprehensive garden planning and management application designed to help urban gardeners, hobbyists, and small-scale growers optimize their growing spaces. The application solves the challenge of efficiently planning, organizing, and maintaining container gardens in limited spaces such as balconies, patios, and small yards.

By providing intuitive tools for garden layout, container placement, crop selection, and maintenance scheduling, Pottable empowers users to maximize yields, reduce resource waste, and enjoy a more successful growing experience. The platform combines horticultural knowledge with user-friendly digital tools to make gardening more accessible and productive for everyone, regardless of experience level.

## Core Features

### 1. Garden Management

- **What it does**: Allows users to create, edit, and manage multiple garden spaces with customizable dimensions, orientations, and environmental conditions.
- **Why it's important**: Provides the foundational structure for all other features and allows users to accurately represent their real-world growing spaces.
- **How it works**: Users can define garden parameters including size, sun exposure, location type (balcony, yard, etc.), and directional orientation. The system stores these parameters and uses them to inform recommendations and planning features.

### 2. Container Management

- **What it does**: Enables users to add, position, and configure growing containers within their garden spaces.
- **Why it's important**: Containers are the primary growing units in urban and space-limited gardening, and their proper placement and configuration are critical for plant success.
- **How it works**: Users can select from common container types or create custom ones, specify dimensions, and place them within the garden layout using an intuitive drag-and-drop interface. The system tracks container properties including volume, drainage, and material.

### 3. Crop Selection and Planning

- **What it does**: Provides a database of common garden crops with growing information and allows users to select appropriate plants for their containers.
- **Why it's important**: Proper crop selection based on container size, sun exposure, and climate is essential for successful growing.
- **How it works**: The system recommends suitable crops based on container properties and garden conditions. Users can browse, search, and filter crops by various attributes including growing season, space requirements, and difficulty level.

### 4. Interactive Garden Layout

- **What it does**: Offers a visual, interactive representation of the user's garden with containers and plants.
- **Why it's important**: Visual planning helps users optimize space usage and understand spatial relationships between plants.
- **How it works**: A responsive, grid-based layout allows users to arrange containers, visualize sun patterns, and identify potential issues before implementing changes in their real garden.

### 5. AI Garden Assistant

- **What it does**: Provides personalized guidance, recommendations, and troubleshooting through an intelligent virtual assistant.
- **Why it's important**: Reduces the knowledge barrier for new gardeners and provides expert-level advice tailored to each user's specific garden conditions.
- **How it works**: The AI agent analyzes garden data, plant selections, local conditions, and user behavior to provide contextual advice, answer questions, and proactively suggest improvements. It learns from user interactions and garden outcomes to continuously improve its recommendations.

### 6. Maintenance Calendar and Task Management

- **What it does**: Generates and tracks garden tasks based on the user's specific plants and growing conditions.
- **Why it's important**: Timely maintenance is critical for garden success, and a structured system helps users stay on track.
- **How it works**: The system creates task schedules based on planted crops, local weather conditions, and garden configuration. Users receive notifications for upcoming tasks and can mark them complete as they're performed.

### 7. Weather Integration and Recommendations

- **What it does**: Incorporates local weather data to provide timely advice and alerts.
- **Why it's important**: Weather conditions significantly impact garden health and maintenance needs.
- **How it works**: The application connects to weather APIs to pull local forecast data and uses this information to adjust task recommendations and provide alerts for extreme conditions.

## User Experience

### User Personas

#### 1. Novice Urban Gardener - Maya

- 28-year-old apartment dweller with a small balcony
- Limited gardening experience but enthusiastic to learn
- Wants to grow herbs and a few vegetables in containers
- Values: Simplicity, guidance, educational content
- Pain points: Uncertainty about what will grow in her space, fear of killing plants

#### 2. Experienced Hobbyist - Carlos

- 45-year-old homeowner with a dedicated garden area
- Several years of gardening experience
- Grows a variety of vegetables, herbs, and flowers
- Values: Optimization, organization, detailed tracking
- Pain points: Maximizing space efficiency, remembering maintenance schedules

#### 3. Efficiency-Focused Grower - Elaine

- 35-year-old with a community garden plot
- Moderate gardening experience with focus on food production
- Grows primarily vegetables for family consumption
- Values: Productivity, resource efficiency, planning tools
- Pain points: Maximizing yield in limited space, planning succession planting

### Key User Flows

#### Onboarding Flow

1. User creates account
2. Completes profile with location and experience level
3. Guided through creation of first garden space with AI assistant support
4. Introduced to container placement and crop selection
5. Presented with initial task recommendations and AI-generated garden plan

#### Garden Creation Flow

1. User initiates new garden creation
2. Defines garden dimensions and environmental factors
3. Specifies location type and directional orientation
4. Reviews and confirms garden settings
5. Receives AI recommendations for optimal garden layout
6. Proceeds to container placement

#### Container Management Flow

1. User selects container type from library or creates custom container
2. Specifies container dimensions and properties
3. Places container within garden layout
4. AI suggests optimal crops for the container based on conditions
5. User selects appropriate crops for the container
6. Reviews planting and maintenance recommendations

#### AI Assistant Interaction Flow

1. User asks question or requests advice through chat interface
2. AI analyzes garden context, user history, and knowledge base
3. Assistant provides personalized response with actionable recommendations
4. User can ask follow-up questions or request clarification
5. Assistant learns from interaction to improve future recommendations

#### Daily/Weekly Usage Flow

1. User logs in and views dashboard with upcoming tasks
2. Checks weather forecast and any alerts
3. Reviews garden status and container health
4. Interacts with AI assistant for specific advice or troubleshooting
5. Completes and logs maintenance tasks
6. Plans future plantings or garden modifications with AI guidance

### UI/UX Considerations

- **Accessibility**: Design for users of all abilities with proper contrast, text scaling, and screen reader compatibility
- **Progressive Disclosure**: Present information in layers of increasing complexity to avoid overwhelming new users
- **Responsive Design**: Ensure seamless experience across desktop, tablet, and mobile devices
- **Visual Feedback**: Provide clear visual cues for interactive elements and system status
- **Guided Experiences**: Offer contextual help and tooltips for complex features
- **Consistency**: Maintain consistent design patterns and interaction models throughout the application
- **Performance**: Ensure rapid loading and response times, especially for the interactive garden layout
- **AI Integration**: Natural, conversational interface for the AI assistant that feels helpful without being intrusive

</context>

<PRD>

## Technical Architecture

### System Components

#### Frontend

- **Framework**: Next.js 15 with App Router for server-side rendering and optimized client-side navigation
- **UI Library**: React 19 with Shadcn UI components for consistent design language
- **State Management**: Zustand for client-side state management with server components for data fetching
- **Styling**: Tailwind CSS for utility-first styling approach
- **Interactivity**: React DnD for drag-and-drop container placement
- **Form Handling**: React-hook-form with Zod validation for type-safe form management
- **AI Chat Interface**: Stream-based chat UI for real-time AI assistant interactions

#### Backend

- **API Layer**: tRPC for type-safe API routes with Next.js API routes
- **Authentication**: BetterAuth for secure user authentication and session management
- **Database Access**: DrizzleORM for type-safe database queries and migrations
- **Feature Flags**: GrowthBook for controlled feature rollout and A/B testing
- **Analytics**: PostHog for user behavior tracking and analytics
- **AI Engine**: Vercel AI SDK integration with large language models for the garden assistant

#### Infrastructure

- **Hosting**: Vercel for frontend and serverless functions
- **Database**: PostgreSQL for relational data storage
- **File Storage**: Vercel Blob for image and asset storage
- **Caching**: Vercel Edge Cache for improved performance
- **CI/CD**: GitHub Actions for automated testing and deployment
- **AI Infrastructure**: Managed AI service with fine-tuned models for gardening domain knowledge

### Data Models

#### User

- Authentication information (Social Provider)
- Profile details (name, location, experience level)
- Preferences and settings
- Subscription status
- AI interaction history

#### Garden

- Dimensions (width, length)
- Location type (balcony, yard, patio, etc.)
- Environmental factors (sun exposure, shade patterns)
- Directional orientation
- Creation and modification dates
- AI-generated recommendations and notes

#### Container

- Type and material
- Dimensions (width, length, height)
- Volume and drainage properties
- Position coordinates within garden
- Associated crops
- Status and condition
- AI-suggested improvements

#### Crop

- Name and variety
- Growing requirements (sun, water, space)
- Planting and harvest dates
- Growth stages and timeline
- Companion planting compatibility
- Seasonal information
- Common issues and solutions for AI troubleshooting

#### Task

- Type and description
- Associated garden, container, or crop
- Due date and priority
- Completion status
- Recurrence pattern
- AI-generated instructions and tips

#### Weather Data

- Local forecast information
- Historical weather patterns
- Alert thresholds and conditions

#### AI Knowledge Base

- Gardening best practices
- Plant-specific care information
- Problem diagnosis decision trees
- Regional growing information
- User interaction patterns and preferences

### APIs and Integrations

#### External APIs

- Weather service API for local conditions and forecasts
- Plant database API for crop information and growing guides
- Geolocation services for accurate location-based recommendations
- Calendar integration for task synchronization
- AI model providers for natural language processing and image recognition

#### Internal APIs

- Garden management endpoints
- Container and crop CRUD operations
- Task creation and tracking
- User preference management
- Recommendation engine
- AI assistant conversation management

### Infrastructure Requirements

- **Compute**: Serverless functions for API endpoints and background processing
- **Database**: Scalable PostgreSQL instance with appropriate indexing
- **Storage**: Blob storage for user uploads and system images
- **Caching**: Edge caching for frequently accessed data
- **CDN**: Content delivery network for static assets
- **Monitoring**: Application performance monitoring and error tracking
- **Backup**: Automated database backups and disaster recovery procedures
- **AI Processing**: Dedicated resources for AI model inference and training

## Development Roadmap

### Phase 1: Foundation (MVP)

- User social provider authentication (Github) and basic profile management
- Garden creation with essential parameters (dimensions, location type)
- Simple container management with basic types and properties
- Limited crop database with essential growing information
- Basic interactive garden layout with container placement
- Simplified task list with manual creation and tracking
- Basic AI assistant with limited gardening knowledge
- Responsive design for desktop and mobile access

### Phase 2: Core Functionality Enhancement

- Expanded container library with detailed properties
- Comprehensive crop database with growing guides
- Advanced garden layout with improved visualization
- Automated task generation based on planted crops
- Basic weather integration for local conditions
- User dashboard with garden status overview
- Enhanced AI assistant with personalized recommendations
- Initial recommendation engine for crop selection

### Phase 3: Advanced Features

- Sophisticated container placement with sun/shade visualization
- Companion planting suggestions and compatibility checks
- Detailed maintenance calendar with task dependencies
- Advanced weather integration with alerts and forecasts
- Harvest tracking and yield estimation
- Garden performance analytics and insights
- AI-powered problem diagnosis with image recognition
- Community features for sharing layouts and tips

### Phase 4: Ecosystem Expansion

- Mobile app with offline capabilities
- Integration with smart garden sensors and devices
- Advanced AI assistant with proactive recommendations
- Seasonal planning tools for succession planting
- Marketplace for garden supplies and plants
- Expert consultation and community Q&A
- Advanced analytics and reporting
- AI-driven garden optimization and yield prediction

## Logical Dependency Chain

### Foundation Layer

1. User authentication (social providers) and account management
2. Basic data models and database schema
3. Core API endpoints for CRUD operations
4. Responsive UI framework and component library
5. Initial AI assistant implementation with basic knowledge base

### Minimum Viable Experience

1. Garden creation and basic configuration
2. Simple container management and placement
3. Limited crop selection and assignment
4. Basic task tracking functionality
5. Essential dashboard views
6. Fundamental AI assistant capabilities for garden planning

### Feature Expansion (in order)

1. Enhanced garden layout visualization
2. Expanded container and crop libraries
3. Automated task generation and notifications
4. Weather integration and basic recommendations
5. Improved user dashboard with status indicators
6. AI assistant knowledge expansion and personalization

### Advanced Capabilities

1. Sophisticated planning tools (companion planting, succession planning)
2. Analytics and performance tracking
3. Community features and content sharing
4. Integration with external systems and devices
5. Marketplace and premium features
6. Advanced AI capabilities including image recognition and predictive analytics

## Risks and Mitigations

### Technical Challenges

#### Risk: Complex Interactive Garden Layout

- **Mitigation**: Start with a simplified grid-based approach and incrementally add complexity. Use established libraries for drag-and-drop functionality and canvas rendering.

#### Risk: Data Synchronization Across Devices

- **Mitigation**: Implement robust state management with optimistic UI updates and conflict resolution strategies. Use real-time database capabilities where appropriate.

#### Risk: Weather Data Reliability

- **Mitigation**: Integrate with multiple weather providers for redundancy. Implement caching and fallback mechanisms for service disruptions.

#### Risk: AI Assistant Accuracy and Usefulness

- **Mitigation**: Start with a curated knowledge base of verified gardening information. Implement feedback mechanisms to improve recommendations. Use a phased approach to expand capabilities based on user needs.

### MVP Scope Management

#### Risk: Feature Creep Extending Timeline

- **Mitigation**: Clearly define MVP requirements with stakeholder agreement. Implement a strict change control process and prioritize features based on user value.

#### Risk: Overengineering Initial Implementation

- **Mitigation**: Focus on functional simplicity for MVP. Design systems with extensibility in mind but implement only what's needed for current phase.

#### Risk: Insufficient User Testing Before Launch

- **Mitigation**: Establish early beta testing program with representative users. Implement feature flags to gradually roll out capabilities and gather feedback.

#### Risk: AI Assistant Complexity Delaying Launch

- **Mitigation**: Define a minimal viable AI assistant with limited but high-value capabilities for initial release. Plan for incremental improvements based on user feedback.

### Resource Constraints

#### Risk: Limited Development Resources

- **Mitigation**: Prioritize features based on user impact and development efficiency. Leverage existing libraries and services where possible.

#### Risk: Performance Issues with Complex Visualizations

- **Mitigation**: Implement progressive loading and rendering optimizations. Consider server-side rendering for complex calculations.

#### Risk: Scaling Challenges with User Growth

- **Mitigation**: Design for horizontal scalability from the beginning. Implement proper caching strategies and database indexing.

#### Risk: AI Processing Costs

- **Mitigation**: Implement efficient caching of common AI responses. Use tiered AI capabilities based on user subscription level. Optimize prompt engineering to reduce token usage.

## Appendix

### Research Findings

#### User Research Summary

- 85% of urban gardeners struggle with optimal container placement
- 72% report difficulty in remembering maintenance schedules
- 68% want better tools for visualizing their garden spaces
- 91% would value crop recommendations based on their specific conditions
- 78% expressed interest in an AI assistant to help with gardening decisions

#### Competitive Analysis

- Existing solutions lack integrated weather data and maintenance tracking
- Most garden planning tools focus on in-ground gardens rather than containers
- Few applications offer interactive, visual planning capabilities
- Limited options for small-space and urban gardening scenarios
- No competitors currently offer sophisticated AI gardening assistants

### Technical Specifications

#### Performance Requirements

- Page load time under 2 seconds for primary views
- Interactive garden layout rendering in under 1 second
- Support for gardens with up to 100 containers without performance degradation
- Responsive design supporting screen sizes from 320px to 2560px width
- AI assistant response time under 3 seconds for standard queries

#### Security Requirements

- None. Better-Auth handles all of our requirements

#### Accessibility Standards

- WCAG 2.1 AA compliance for all user interfaces
- Keyboard navigation support throughout the application
- Screen reader compatibility for all functional elements
- Color contrast ratios meeting accessibility guidelines

#### AI Assistant Capabilities

- Natural language understanding for gardening terminology
- Personalized recommendations based on user's specific garden conditions
- Problem diagnosis from text descriptions and uploaded images
- Proactive notifications for seasonal tasks and weather-related actions
- Continuous learning from user interactions and feedback
- Integration with garden planning tools for contextual assistance

</PRD>
